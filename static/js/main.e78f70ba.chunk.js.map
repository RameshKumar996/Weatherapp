{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","lat","setlat","long","setlong","data","setdata","fetchData","a","isNaN","Number","axios","get","properties","forecast","forecastData","periods","temperature","temperatureUnit","detailedForecast","relativeLocation","city","state","temperatureInCelcius","timeZone","updated","days","map","item","push","startTime","split","console","log","style","display","flexDirection","justifyContent","alignItems","marginTop","value","onChange","e","target","marginRight","placeholder","type","role","onClick","width","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yPA8FeA,MA3Ff,WACE,MAAsBC,mBAAS,GAA/B,mBAAOC,EAAP,KAAYC,EAAZ,KACA,EAAwBF,mBAAS,GAAjC,mBAAOG,EAAP,KAAaC,EAAb,KACA,EAAwBJ,mBAAS,IAAjC,mBAAOK,EAAP,KAAaC,EAAb,KACMC,EAAS,uCAAG,kDAAAC,EAAA,0DACZC,MAAMC,OAAOT,MAASQ,MAAMC,OAAOP,IADvB,uBAEdG,EAAQ,kDAFM,mDAMGK,IAAMC,IAAN,yCACmBF,OAAOT,GAD1B,YACkCS,OAAOP,KAP5C,cAMVE,EANU,gBASWM,IAAMC,IAAIP,EAAKA,KAAKQ,WAAWC,UAT1C,OASVC,EATU,SAWZA,EAAaV,KAAKQ,WAAWG,QAAQ,GADjCC,EAVQ,EAURA,YAAaC,EAVL,EAUKA,gBAAiBC,EAVtB,EAUsBA,iBAVtB,EAYQd,EAAKA,KAAKQ,WAAWO,iBAAiBP,WAAtDQ,EAZQ,EAYRA,KAAMC,EAZE,EAYFA,MACZjB,EAAKA,KAAKQ,WAAWI,YAAcA,EACnCZ,EAAKA,KAAKQ,WAAWU,qBAA6C,GAApBN,EAAc,IAAW,EAEjEO,EAAanB,EAAKA,KAAKQ,WAAvBW,SACAC,EAAYV,EAAaV,KAAKQ,WAA9BY,QACFC,EAAO,GACXX,EAAaV,KAAKQ,WAAWG,QAAQW,KAAI,SAACC,GACpCA,EAAKX,YAAc,IACrBS,EAAKG,KAAKD,EAAKE,UAAUC,MAAM,KAAK,OAIxCzB,EAAQ,QAAD,OACGW,GADH,OACiBC,EADjB,4BAEmB,GAApBD,EAAc,IAAW,EAFxB,qBAGQI,EAHR,qBAGyBC,EAHzB,uBAG6CE,EAH7C,qBAIHC,EAAQM,MAAM,KAAK,GAAGA,MAAM,KAAK,GAJ9B,0BAKaZ,EALb,8CAKmEO,EAAKC,KAC3E,SAACC,GAAD,OAAUA,OA/BA,kDAmCdI,QAAQC,IAAR,MACA3B,EAAQ,gDApCM,0DAAH,qDAyCf,OACE,qCACE,sBACE4B,MAAO,CACLC,QAAS,OACTC,cAAe,MACfC,eAAgB,SAChBC,WAAY,SACZC,UAAW,IANf,UASE,uBACEC,MAAOvC,EACPwC,SAAU,SAACC,GAAD,OAAOxC,EAAOwC,EAAEC,OAAOH,QACjCN,MAAO,CAAEU,YAAa,IACtBC,YAAY,WACZC,KAAK,WAEP,uBACEN,MAAOrC,EACPsC,SAAU,SAACC,GAAD,OAAOtC,EAAQsC,EAAEC,OAAOH,QAClCM,KAAK,SACLD,YAAY,iBAGhB,sBACEX,MAAO,CACLC,QAAS,OACTC,cAAe,SACfC,eAAgB,SAChBC,WAAY,SACZC,UAAW,IANf,UASE,8BACE,yBAAQQ,KAAK,SAASC,QAASzC,EAA/B,UACG,IADH,cAKF,qBAAK2B,MAAO,CAAEe,MAAO,SAArB,SAAiC5C,WC5E1B6C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.e78f70ba.chunk.js","sourcesContent":["import \"./App.css\";\nimport { useState } from \"react\";\nimport axios from \"axios\";\nfunction App() {\n  const [lat, setlat] = useState(0);\n  const [long, setlong] = useState(0);\n  const [data, setdata] = useState(\"\");\n  const fetchData = async () => {\n    if (isNaN(Number(lat)) || isNaN(Number(long))) {\n      setdata(\"Please enter valid numeric lat and lang please\");\n      return;\n    }\n    try {\n      let data = await axios.get(\n        `https://api.weather.gov/points/${Number(lat)},${Number(long)}`\n      );\n      let forecastData = await axios.get(data.data.properties.forecast);\n      let { temperature, temperatureUnit, detailedForecast } =\n        forecastData.data.properties.periods[0];\n      let { city, state } = data.data.properties.relativeLocation.properties;\n      data.data.properties.temperature = temperature;\n      data.data.properties.temperatureInCelcius = ((temperature - 32) * 5) / 9;\n\n      let { timeZone } = data.data.properties;\n      let { updated } = forecastData.data.properties;\n      let days = [];\n      forecastData.data.properties.periods.map((item) => {\n        if (item.temperature > 85) {\n          days.push(item.startTime.split(\"T\")[0]);\n        }\n      });\n\n      setdata(\n        `Temp:${temperature}${temperatureUnit} Temp in Celcius=${\n          ((temperature - 32) * 5) / 9\n        }C \\t City:${city}\\t  State:${state}\\t TimeZone:${timeZone} \\t  time=${\n          updated.split(\"T\")[1].split(\"+\")[0]\n        } Heat Advisory:${detailedForecast} Days on temperature above 85F are:${days.map(\n          (item) => item\n        )}`\n      );\n    } catch (e) {\n      console.log(e);\n      setdata(\"Data not avaliable for inserted lat and long\");\n      // setlat();\n      // setlong();\n    }\n  };\n  return (\n    <>\n      <div\n        style={{\n          display: \"flex\",\n          flexDirection: \"row\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          marginTop: 50,\n        }}\n      >\n        <input\n          value={lat}\n          onChange={(e) => setlat(e.target.value)}\n          style={{ marginRight: 20 }}\n          placeholder=\"latitude\"\n          type=\"Number\"\n        />\n        <input\n          value={long}\n          onChange={(e) => setlong(e.target.value)}\n          type=\"Number\"\n          placeholder=\"longitude\"\n        />\n      </div>\n      <div\n        style={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          marginTop: 50,\n        }}\n      >\n        <div>\n          <button role=\"button\" onClick={fetchData}>\n            {\" \"}\n            Submit\n          </button>\n        </div>\n        <div style={{ width: \"250px\" }}>{data}</div>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}